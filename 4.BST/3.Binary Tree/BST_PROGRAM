#include<stdio.h>
#include<stdlib.h>
struct bstnode
{
	int data;
	struct bstnode *left;
	struct bstnode *right;
}*root=NULL;
struct bstnode *insert(struct bstnode *root,int item)
{
	if(root==NULL)
	{
		root=(struct bstnode*)malloc(sizeof(struct bstnode));
		root->data=item;
		root->left=NULL;
		root->right=NULL;
	}
	else
	{
		if(item<root->data)
		{
			root->left=insert(root->left,item);
		}
		else
		{
			root->right=insert(root->right,item);
		}
    }
}
void inorder(struct bstnode *root)
{
	if(root!=NULL)
	{
	  preorder(root->left);
	  printf("%d\n",root->data);
	  preorder(root->right);
    }
}
void preorder(struct bstnode *root)
{
	if(root!=NULL)
	{
	  printf("%d\n",root->data);
	  preorder(root->left);
	  preorder(root->right);
    }
}
void postorder(struct bstnode *root)
{
	if(root!=NULL)
	{
	  preorder(root->left);
	  preorder(root->right);
      printf("%d\n",root->data);
	}
}
int main()
{
	int item,ch;
	while(1)
	{
		printf("\nenter 1 to insert a node");
		printf("\nenter 2 to display binary tree by inorder");
		printf("\nenter 3 to display binary tree by preorder");
		printf("\nenter 4 to display binary tree by postorder");
		printf("\nenter your choice ");
		scanf("%d",&ch);
		switch(ch)
		{
			case 1:printf("enter the item to add ");
			       scanf("%d",&item);
			       root=insert(root,item);
			       break;
			case 2:printf("\ninorder traversing");
			       inorder(root);
				   break;
			case 3:printf("\npreorder traversing");
			       preorder(root);
				   break;
			case 4:printf("\npostorder traversing");
			       postorder(root);
				   break;       
		    default:printf("invalid choice");	       
		}
	}
	return 0;
}
